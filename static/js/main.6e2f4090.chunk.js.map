{"version":3,"sources":["mesagge.jsx","App.js","reportWebVitals.js","index.js"],"names":["Mesagge","forwardRef","ref","message","isUser","username","user","className","Card","CardContent","text","firebaseApp","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","prompt","db","firestore","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","src","width","height","Input","placeholder","value","onChange","event","target","IconButton","disabled","variant","color","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAsBeA,EAjBEC,sBAAW,WAAqBC,GAAS,IAA5BC,EAA2B,EAA3BA,QAGpBC,EAH+C,EAAnBC,WAGNF,EAAQG,KACpC,OAEI,aADA,CACA,OAAKJ,IAAOA,EAAKK,UAAS,kBAAaH,GAAU,gBAAjD,SACG,cAACI,EAAA,EAAD,CAAMD,UAAWH,EAAS,mBAAoB,oBAA9C,SACK,eAACK,EAAA,EAAD,CAAaF,UAAU,eAAvB,WAEMH,GAAD,UAAcD,EAAQG,MAAQ,sBAA9B,MAFL,KAEkEH,EAAQO,e,iCCLpFC,EAAcC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBA4EJC,MAvEf,WAAe,MAEYC,mBAAS,IAFrB,mBAENC,EAFM,KAEAC,EAFA,OAGmBF,mBAAS,IAH5B,mBAGNG,EAHM,KAGIC,EAHJ,OAImBJ,mBAAS,IAJ5B,mBAINjB,EAJM,KAIIsB,EAJJ,KAObC,qBAAU,WACRD,EAAaE,OAAO,uBAClB,IAGJ,IAAMC,EAAKnB,EAAYoB,YAuBvB,OAtBAH,qBAAW,WACTE,EAAGE,WAAW,YACXC,QAAQ,YAAY,QACpBC,YAAW,SAAAC,GAEZT,EAAYS,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIpC,QAAUmC,EAAIE,iBAElE,IAgBD,sBAAKjC,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACQ,qBAAKkC,IAAI,yIAAyIC,MAAM,MAAMC,OAAO,UAE7K,qBAAKpC,UAAU,SAAf,SACA,qDAAuB,uBAAvB,kDAEA,uBAAOA,UAAU,gBAAjB,UAGM,cAACqC,EAAA,EAAD,CAAOC,YAAY,qBAAqBtC,UAAU,aAAauC,MAAOvB,EAAOwB,SAAU,SAAAC,GAAK,OAAIxB,EAASwB,EAAMC,OAAOH,UACtH,cAACI,EAAA,EAAD,CACIC,UAAW5B,EACX6B,QAAQ,YACRC,MAAM,UACNC,KAAK,SACLC,QA9BO,SAACP,GAElBA,EAAMQ,iBAEN1B,EAAGE,WAAW,YAAYyB,IAAI,CAC5B/C,KAAMa,EACNjB,KAAMD,EACNqD,UAAW9C,IAASmB,UAAU4B,WAAWC,oBAI3CpC,EAAS,KAcH,SAMA,cAAC,IAAD,SAKN,cAAC,IAAD,CAAUjB,UAAU,YAApB,SAEEkB,EAASY,KAAK,gBAAEE,EAAF,EAAEA,GAAGpC,EAAL,EAAKA,QAAL,OAEZ,aADA,CACC,EAAD,CAAmBA,QAASA,EAASE,SAAUA,GAAhCkC,YCxEVsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6e2f4090.chunk.js","sourcesContent":["import React,{forwardRef} from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport './Mesagge.css'\r\n/*Legga el objeto completo message y llega username */\r\n const Mesagge = forwardRef(({message,username}, ref) => {\r\n    /*Si username es igual en valor y tipo de dato al valor user\r\n     del objeto message retorna verdadero y se almacena en isUser */\r\n    const isUser = username === message.user;\r\n    return (\r\n        /*El usuario actual verá su mensaje a la derecha por los estilod messa */\r\n        <div ref = {ref} className={`message ${isUser && 'message_user'}`}>\r\n           <Card className={isUser ? \"message_userCard\" :\"message_guestCard\"}>\r\n                <CardContent className=\"text-message\">\r\n                    {/*No necesitamos ver nuestro username solo de los demás */}\r\n                    {!isUser && `${message.user || 'Usuario desconocido'  }: `}  {message.text} \r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n\r\n    )\r\n})\r\nexport default Mesagge","import  React, {useState,useEffect} from 'react';\nimport './App.css';\nimport {Input,IconButton} from '@material-ui/core';\nimport Message from './mesagge.jsx'\nimport firebase from 'firebase'\nimport FlipMove from 'react-flip-move'\nimport SendIcon from '@material-ui/icons/Send';\n\n\n/* configuracion de firebase para utilizar la base de datos */\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"AIzaSyCH2Kv75GZcxY167XMjhZuetVvE9WlQcM8\",\n    authDomain: \"msg-clone-71ec0.firebaseapp.com\",\n    projectId: \"msg-clone-71ec0\",\n    storageBucket: \"msg-clone-71ec0.appspot.com\",\n    messagingSenderId: \"584204924861\",\n    appId: \"1:584204924861:web:38568bcd573921b64004d4\",\n    measurementId: \"G-X40ZXREY24\"\n})\n\n\n\nfunction App() {\n  //Estado que utilizatemos\n  const [input,setInput] = useState('')\n  const [messages, setMessages] = useState([])\n  const [username, setUsername] = useState('')\n\n  /*Insertamos el nombre de usuario */\n  useEffect(() => {\n    setUsername( prompt(\"Insert your name\"))\n   }, [])\n\n  /* Vamos a setear todos los mensajes que inserta el usuario actual y enviarlo a firebase */\n  const db = firebaseApp.firestore() //Inicializamos la variabñe db de firebase\n  useEffect( () => {\n    db.collection('messages') //Llamamos a la coleccion\n      .orderBy('timestamp','desc') //ordenamos de forma ascendente\n      .onSnapshot(snapshot => { \n      //seteamos los estados del mensajes con los valores que tenemos en firebase, le pasamos la clave del id y el bojeto msg\n      setMessages(snapshot.docs.map(doc => ({id: doc.id, message:  doc.data() } ))) \n    })\n  }, [])\n\n   const sendMessage = (event) =>{\n     //No refrescar la página\n      event.preventDefault();\n     //vamos a crear o insertar en una coleccion llamada message los valores \n      db.collection('messages').add({\n        text: input,\n        user: username,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n      })\n     //propagar(mantener lo que tenemos) el arreglo y agregar un nuevo mensaje al final\n \n      setInput('');\n   }\n  return (\n    <div className=\"App\">\n      <nav className=\"icon-msg\">\n              <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/Facebook_Messenger_logo_2020.svg/1200px-Facebook_Messenger_logo_2020.svg.png\" width=\"100\" height=\"100\"></img>\n      </nav>\n      <nav className=\"text-p\">\n      <h1>Messeger Clone-App <br />by: Fraporitmos 🔥🚀  </h1>\n      </nav>\n      <form  className=\"input_message\">\n           {/*Cargamos el valor del input y cada vez que haya un evento se settee el estado con ese valor*/}\n\n            <Input placeholder=\"Enter a message...\" className=\"input_user\" value={input} onChange={event => setInput(event.target.value)} />\n            <IconButton\n                disabled={!input}\n                variant=\"contained\"\n                color=\"primary\"\n                type='submit'\n                onClick={sendMessage}>\n            <SendIcon/>\n            </IconButton>\n      </form>\n\n\n      <FlipMove className=\"container\">\n      {\n        messages.map( ({id,message}) => (\n          /*Se pasa el message como objeto para recibir sus dos valores */\n          <Message key= {id} message={message} username={username}   /> \n        ))\n      }  \n      </FlipMove>\n    \n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}